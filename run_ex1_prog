#!/bin/bash

# If not mounted already, mount the P network drive to pull data from.
if [ "$(ls -A /mnt/p/)" ]
then
	: # do nothing
else
	printf "P: drive not mounted. Enter password if prompted.\n"
	sudo ${HOME}/pu_automount
fi


# Define path variables
LOCAL_RAW="$HOME/ex1_cvt_data_preproc/raw_data"
LOCAL_SYNC="$HOME/ex1_cvt_data_preproc/sync_data"
LOCAL_FIG="$HOME/ex1_cvt_data_preproc/figs"


# Create raw_data folders if they doesn't exist already
if [ -d "$LOCAL_RAW" ];
then
	: # do nothing
else
	mkdir "$LOCAL_RAW"
fi

if [ -d "$LOCAL_RAW/INCA/" ];
then
	: # do nothing
else
	mkdir "$LOCAL_RAW/INCA/"
fi

if [ -d "$LOCAL_RAW/eDAQ/" ];
then
	: # do nothing
else
	mkdir "$LOCAL_RAW/eDAQ/"
fi


# Make sure local data folders are empty
if [ "$(ls -A ${LOCAL_RAW}/INCA/)" ]
then
	rm ${LOCAL_RAW}/INCA/*
fi

if [ "$(ls -A ${LOCAL_RAW}/eDAQ/)" ]
then
	rm ${LOCAL_RAW}/eDAQ/*
fi

if [ -d ${LOCAL_SYNC} ] && [ "$(ls -A ${LOCAL_SYNC}/)" ]
then
	rm ${LOCAL_SYNC}/*
fi


# Copy data from P drive folder into local project's directory structure.
REMOTE_RAW="/mnt/p/Current Projects/100840 GOAT Engine/Prod Engg/Test_&_Reliab_Svcs/CVT/RAW_DATA_TO_SYNC"
REMOTE_SYNC="/mnt/p/Current Projects/100840 GOAT Engine/Prod Engg/Test_&_Reliab_Svcs/CVT/SYNCED_DATA"

if [ "$(ls -A "${REMOTE_RAW}/INCA/")" ]
then
	printf "Copying data from P: drive RAW_DATA_TO_SYNC/INCA folder...\n"
	rsync -aziv "${REMOTE_RAW}"/INCA/* ${LOCAL_RAW}/INCA
else
	printf "Nothing found in P: drive RAW_DATA_TO_SYNC/INCA/ folder. Exiting.\n"
	exit 1
fi

if [ "$(ls -A "${REMOTE_RAW}/eDAQ/")" ]
then
	printf "Copying data from P: drive RAW_DATA_TO_SYNC/eDAQ folder...\n"
	rsync -aziv "${REMOTE_RAW}"/eDAQ/* ${LOCAL_RAW}/eDAQ
else
	printf "Nothing found in P: drive RAW_DATA_TO_SYNC/INCA/ folder. Exiting.\n"
	exit 1
fi


# Navigate into the local project then run the python script, storing its return value.
cd ~/ex1_cvt_data_preproc # Need to be in the project dir for the Python script to run its main function.

printf "Starting Python script:\n"
python3 run.py --auto --over --plot
PYTHON_RETURN=$? # gets return value of last command executed.
printf "Finished Python script.\n"


# Make sure the program ran correctly
if [ ${PYTHON_RETURN} -ne 0 ]
then
	printf "\nSomething went wrong when executing the Python program.\n"
	exit 1
fi


# Copy synced data to P: drive. Make sure no data lingering in destination folder first.
if [ "$(ls -A "${REMOTE_SYNC}/")" ]
then
	printf "\nSYNCED_DATA folder on P: drive not empty.\nContinue anyway (might overwrite something)?\nEnter 'Y' to proceed or anything else to quit.\n"
	read -p ">" answer
	if [ "$answer" == "y" -o "$answer" == "Y" ]
	then
		: # do nothing. Proceed out of if statement and run final lines of code.
	else
		printf "Aborting copy.\n"
		exit 1
	fi
fi

printf "\nCopying output data and plots to P: drive SYNCED_DATA folder...\n"
# Can't use rsync because destination drive is NTFS or something that doesn't
# allow metadata to be modified post-copy like rsync wants to do.
cp ${LOCAL_SYNC}/* "${REMOTE_SYNC}"
cp ${LOCAL_FIG}/* "${REMOTE_SYNC}"



# References:
# https://stackoverflow.com/questions/6834487/what-is-the-dollar-question-mark-variable-in-shell-scripting
# https://stackoverflow.com/questions/14561475/use-bash-home-in-shell-script#14561608
# https://stackoverflow.com/questions/4181703/how-to-concatenate-string-variables-in-bash
# https://www.cyberciti.biz/faq/linux-unix-shell-check-if-directory-empty/
# https://stackoverflow.com/questions/8352851/how-to-call-one-shell-script-from-another-shell-script
